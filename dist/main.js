(()=>{"use strict";var e={853:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),r=n.n(a),o=n(645),i=n.n(o)()(r());i.push([e.id,'#content {\n    display: flex;\n    flex-direction: column;\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n/* Home Page */\n/* Navbar */\nul {\n    display: flex;\n    height: 70px;\n    width: 100%;\n    background-color: #6ACE46;\n    justify-content: space-around;\n}\n\n.nav-item {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n}\n\nbutton:hover, a:hover, #menu-toggle-btn:hover {\n    cursor: pointer;\n}\n\n#search-bar-li i {\n    padding-left: 6px;\n}\n\n#logo-li img {\n    width: 50px;\n    height: 50px;\n}\n\nul i {\n    color: #FFF;\n    font-size: 24px;\n}\n\n/* Menu */\n#menu {\n    background-color: #9FE885;\n    display: none;\n    flex-direction: column;\n    width: 50%;\n    height: calc(100% - 70px);\n    position: fixed;\n    top: 70px;\n    z-index: 0;\n}\n\n/* TODO: add transition to slide in load */\n\n.menu-tab {\n    display: grid;\n    padding: 16px;\n    grid-template-columns: 1fr 4fr;\n    justify-content: center;\n    align-content: center;\n    font-size: 22px;\n}\n\n.menu-tab li {\n    padding-left: 5px;\n}\n\n/* Folders Heading */\n.heading {\n    /* z-index: -2; */\n    font-size: 30px;\n    padding: 30px 0 20px 0;\n    width: 100%;\n    text-align: center;\n}\n\n.add-btn {\n    position: absolute;\n    right: 5px;\n    color: #6ACE46;\n}\n\n.back-btn {\n    position: absolute;\n    left: 5px;\n    color: #6ACE46;\n}\n\n/* New Folder & Task Forms */\n.new-folder-container, .new-task-container {\n    width: 100%;\n}\n\n#folder-form, #task-form {\n    /* display: none; */\n    justify-content: center;\n    align-items: center;\n}\n\ninput[type="text"]:focus, input[type="date"]:focus, select:focus, textarea:focus {\n    outline: none;\n}\n\ninput[type="text"], input[type="date"], select, textarea {\n    border: none;\n    padding: 3px;\n}\n\nselect, input[type="date"], textarea {\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n.new-folder, .new-task {\n    display: grid;\n    row-gap: 10px;\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n    row-gap: 20px;\n}\n\n.form-title {\n    font-size: 22px;\n    text-align: left;\n}\n\n.form-content {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    row-gap: 20px;\n}\n\n.form-btns {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-around;\n}\n\n.form-btn {\n    padding: 5px;\n}\n\n/* Folders Directory */\n.folders-dir, .tasks-list {\n    height: calc(100% - 70px);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#opaque {\n    position: absolute;\n    height: 0;\n    width: 0;\n    top: 70px;\n    left: 50%;\n}\n\n.heading-title {\n    display: inline-block;\n}\n\n/* Folder */\n.folders, .tasks {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 18px;\n}\n\n.folder {\n    display: flex;\n    width: 80%;\n    justify-content: space-between;\n    padding: 10px;\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 1fr 3fr 3fr 1fr;\n    width: 80%;\n    justify-items: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.act-btns a:not(:last-child) {\n    padding-right: 10px;\n}\n\n.folder:hover, .folder:active, .task:hover, .task:active {\n    background-color: #6ACE46;\n    cursor: pointer;\n}\n',"",{version:3,sources:["webpack://./src/styles/home-page.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,0CAA0C;AAC9C;;AAEA,cAAc;AACd,WAAW;AACX;IACI,aAAa;IACb,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;AAEA,SAAS;AACT;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,yBAAyB;IACzB,eAAe;IACf,SAAS;IACT,UAAU;AACd;;AAEA,0CAA0C;;AAE1C;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;IACvB,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA,oBAAoB;AACpB;IACI,iBAAiB;IACjB,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;AAClB;;AAEA,4BAA4B;AAC5B;IACI,WAAW;AACf;;AAEA;IACI,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,YAAY;AAChB;;AAEA,sBAAsB;AACtB;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,SAAS;IACT,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB;;AAEA,WAAW;AACX;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,UAAU;IACV,qBAAqB;IACrB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB",sourcesContent:['#content {\n    display: flex;\n    flex-direction: column;\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n/* Home Page */\n/* Navbar */\nul {\n    display: flex;\n    height: 70px;\n    width: 100%;\n    background-color: #6ACE46;\n    justify-content: space-around;\n}\n\n.nav-item {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n}\n\nbutton:hover, a:hover, #menu-toggle-btn:hover {\n    cursor: pointer;\n}\n\n#search-bar-li i {\n    padding-left: 6px;\n}\n\n#logo-li img {\n    width: 50px;\n    height: 50px;\n}\n\nul i {\n    color: #FFF;\n    font-size: 24px;\n}\n\n/* Menu */\n#menu {\n    background-color: #9FE885;\n    display: none;\n    flex-direction: column;\n    width: 50%;\n    height: calc(100% - 70px);\n    position: fixed;\n    top: 70px;\n    z-index: 0;\n}\n\n/* TODO: add transition to slide in load */\n\n.menu-tab {\n    display: grid;\n    padding: 16px;\n    grid-template-columns: 1fr 4fr;\n    justify-content: center;\n    align-content: center;\n    font-size: 22px;\n}\n\n.menu-tab li {\n    padding-left: 5px;\n}\n\n/* Folders Heading */\n.heading {\n    /* z-index: -2; */\n    font-size: 30px;\n    padding: 30px 0 20px 0;\n    width: 100%;\n    text-align: center;\n}\n\n.add-btn {\n    position: absolute;\n    right: 5px;\n    color: #6ACE46;\n}\n\n.back-btn {\n    position: absolute;\n    left: 5px;\n    color: #6ACE46;\n}\n\n/* New Folder & Task Forms */\n.new-folder-container, .new-task-container {\n    width: 100%;\n}\n\n#folder-form, #task-form {\n    /* display: none; */\n    justify-content: center;\n    align-items: center;\n}\n\ninput[type="text"]:focus, input[type="date"]:focus, select:focus, textarea:focus {\n    outline: none;\n}\n\ninput[type="text"], input[type="date"], select, textarea {\n    border: none;\n    padding: 3px;\n}\n\nselect, input[type="date"], textarea {\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n.new-folder, .new-task {\n    display: grid;\n    row-gap: 10px;\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n    row-gap: 20px;\n}\n\n.form-title {\n    font-size: 22px;\n    text-align: left;\n}\n\n.form-content {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    row-gap: 20px;\n}\n\n.form-btns {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-around;\n}\n\n.form-btn {\n    padding: 5px;\n}\n\n/* Folders Directory */\n.folders-dir, .tasks-list {\n    height: calc(100% - 70px);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#opaque {\n    position: absolute;\n    height: 0;\n    width: 0;\n    top: 70px;\n    left: 50%;\n}\n\n.heading-title {\n    display: inline-block;\n}\n\n/* Folder */\n.folders, .tasks {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 18px;\n}\n\n.folder {\n    display: flex;\n    width: 80%;\n    justify-content: space-between;\n    padding: 10px;\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 1fr 3fr 3fr 1fr;\n    width: 80%;\n    justify-items: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.act-btns a:not(:last-child) {\n    padding-right: 10px;\n}\n\n.folder:hover, .folder:active, .task:hover, .task:active {\n    background-color: #6ACE46;\n    cursor: pointer;\n}\n'],sourceRoot:""}]);const d=i},434:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),r=n.n(a),o=n(645),i=n.n(o)()(r());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);a&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},i=[],d=0;d<e.length;d++){var s=e[d],c=a.base?s[0]+a.base:s[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var m=n(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==m)t[m].references++,t[m].updater(f);else{var p=r(f,a);a.byIndex=d,t.splice(d,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var d=n(o[i]);t[d].references--}for(var s=a(e,r),c=0;c<o.length;c++){var l=n(o[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},271:(e,t,n)=>{e.exports=n.p+"411041d6cc347d421ae3.png"},134:(e,t,n)=>{e.exports=n.p+"0b347cb08a78889191c4.png"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),o=n(569),i=n.n(o),d=n(565),s=n.n(d),c=n(216),l=n.n(c),u=n(589),m=n.n(u),f=n(434),p={};p.styleTagTransform=m(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=l(),t()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var A=n(853),h={};h.styleTagTransform=m(),h.setAttributes=s(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),t()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const g=()=>{const e=document.createElement("div");e.id="menu";const t=document.createElement("div");t.id="folders-title",t.classList.add("menu-tab"),e.appendChild(t);const n=document.createElement("i");n.classList.add("fas"),n.classList.add("fa-folder"),t.appendChild(n);const a=document.createElement("a");a.classList.add("menu-title"),a.innerText="Folders",t.appendChild(a);const r=document.createElement("div");r.id="today-title",r.classList.add("menu-tab"),e.appendChild(r);const o=document.createElement("i");o.classList.add("fas"),o.classList.add("fa-calendar-day"),r.appendChild(o);const i=document.createElement("a");i.classList.add("menu-title"),i.innerText="Today",r.appendChild(i);const d=document.createElement("div");d.id="this-week-title",d.classList.add("menu-tab"),e.appendChild(d);const s=document.createElement("i");s.classList.add("fas"),s.classList.add("fa-calendar-week"),d.appendChild(s);const c=document.createElement("a");c.classList.add("menu-title"),c.innerText="This Week",d.appendChild(c);const l=document.createElement("div");l.id="folders-title",l.classList.add("menu-tab"),e.appendChild(l);const u=document.createElement("i");u.classList.add("fas"),u.classList.add("fa-tasks"),l.appendChild(u);const m=document.createElement("a");return m.classList.add("menu-title"),m.innerText="All Tasks",l.appendChild(m),e},C=e=>{const t=document.createElement("div");t.classList.add("heading"),t.id="heading";const n=document.createElement("h1");if(n.classList.add("heading-title"),n.innerText=`${e[0].toUpperCase()+e.substring(1)}`,t.appendChild(n),"folder"===e){const e=document.createElement("a");e.id="back-btn",e.classList.add("back-btn"),t.appendChild(e);const n=document.createElement("i");n.classList.add("fas"),n.classList.add("fa-chevron-circle-left"),e.appendChild(n)}const a=document.createElement("a");a.classList.add("add-btn"),a.id=`add-${e}-btn`,t.appendChild(a);const r=document.createElement("i");return r.classList.add("fas"),r.classList.add("fa-plus-circle"),a.appendChild(r),t},b=e=>{const t=document.getElementById(e);"none"!==window.getComputedStyle(t).display?t.style.display="none":["folder-form"].includes(e)?t.style.display="flex":[].includes(e)?t.style.display="grid":["add-folders-btn"].includes(e)?t.style.display="inline-block":t.style.display="block"},y=()=>{const e=document.getElementById("opaque");let t=window.getComputedStyle(e).backgroundColor;const n=document.getElementsByClassName("heading")[0];"rgba(0, 0, 0, 0)"===t?(e.style.backgroundColor="rgba(0, 0, 0, 0.6)",e.style.height="calc(100% - 70px)",e.style.width="50%",n.style.zIndex="-2"):(e.style.backgroundColor="rgba(0, 0, 0, 0)",e.style.height="0",e.style.width="0",n.style.zIndex="0")},v=e=>{alert(e)},w=e=>0===e.length,x=(e,t)=>{const n=(e=>{let t=[];for(let n=0;n<e.length;n++)t.push(e[n].name);return t})(t);return!!n.includes(e)},E=e=>""===e.replace(/\s/g,""),k=e=>0==e,B=(e,t)=>(console.log(e,t),e===t);class T{constructor(e,t=[]){this.name=e,this.tasks=t}addTask=e=>{this.tasks.push(e)}}const I=e=>{const t=document.createElement("div");t.classList.add("folder");const n=document.createElement("h2");n.classList.add("folder-name"),n.innerText=e,t.appendChild(n),M.detectFolderClick(n);const a=document.createElement("div");a.classList.add("act-btns"),t.appendChild(a);const r=document.createElement("a");r.classList.add("edit-btn"),a.appendChild(r);const o=document.createElement("i");o.classList.add("fas"),o.classList.add("fa-edit"),r.appendChild(o),M.detectEditFolder(o);const i=document.createElement("a");i.classList.add("del-btn"),a.appendChild(i);const d=document.createElement("i");return d.classList.add("fas"),d.classList.add("fa-trash-alt"),i.appendChild(d),M.detectDeleteFolder(d),t},L=(()=>{let e=[new T("Inbox",[])];return{addFolder:t=>{if(w(e)){let n=new T(t,[]);e.push(n),Oe.displayMainPage(e)}else if(x(t,e))qe("new-folder-form"),v("Folder already exists!");else if(E(t))qe("new-folder-form"),v("Folder name cannot be empty!");else{let n=new T(t,[]);e.push(n),Oe.displayMainPage(e)}},deleteFolder:(t,n)=>{k(t)?v(`Cannot delete ${e[t].name}! Must have at least 1 folder.`):(e.splice(t,1),(e=>{e.innerHTML="",e.remove()})(n),Oe.displayMainPage(e))},editFolder:(t,n,a,r)=>{B(a,r)?(e[t].name=a,Oe.displayMainPage(e)):x(a,e)?v("Folder already exists!"):E(a)?v("Folder name cannot be empty!"):(e[t].name=a,Oe.displayMainPage(e))},getFolders:()=>e,getFolder:t=>e[t]}})(),M={detectMenuClick:()=>{document.getElementById("menu-toggle-btn").addEventListener("click",(()=>{b("menu"),y()})),document.getElementById("opaque").addEventListener("click",(()=>{b("menu"),y()}))},detectAddFolder:()=>{document.getElementById("add-folders-btn").addEventListener("click",(()=>{b("add-folders-btn"),b("folder-form")}))},detectFolderCancelBtn:()=>{document.getElementById("cancel-folder-btn").addEventListener("click",(e=>{e.preventDefault(),qe("new-folder-form"),b("folder-form"),b("add-folders-btn")}))},detectFolderSubmitBtn:()=>{document.getElementById("create-folder-btn").addEventListener("click",(e=>{e.preventDefault(),b("folder-form"),b("add-folders-btn");let t=Fe();qe("new-folder-form"),L.addFolder(t)}))},detectEditFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.parentElement.parentElement,n=t.children[0].innerText;t.dataset.oldName=n,Pe(t),We(t)}))},detectDeleteFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.parentElement.parentElement,n=t.dataset.index;L.deleteFolder(n,t)}))},detectSaveEditFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement,n=t.dataset.index,a=je(t),r=t.dataset.oldName;L.editFolder(n,t,a,r)}))},detectFolderClick:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.dataset.index;const n=L.getFolder(t);Oe.displayFolderPage(n)}))},detectBackBtn:()=>{document.getElementById("back-btn").addEventListener("click",(()=>{const e=L.getFolders();renderMainPage(e)}))},detectAddTask:()=>{document.getElementById("add-task-btn").addEventListener("click",(()=>{b("add-task-btn"),b("new-task-form")}))},detectTaskCancelBtn:()=>{document.getElementById("cancel-task-btn").addEventListener("click",(e=>{e.preventDefault(),qe("new-task-form"),b("task-form"),b("add-task-btn")}))},detectTaskSubmitBtn:()=>{document.getElementById("create-task-btn").addEventListener("click",(e=>{e.preventDefault(),b("task-form"),b("add-task-btn"),getTaskFormInfo(),qe("new-task-form")}))}};function S(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function D(e){return S(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function U(e){S(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function F(e){if(S(1,arguments),!D(e)&&"number"!=typeof e)return!1;var t=U(e);return!isNaN(Number(t))}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function W(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}const j={date:W({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:W({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:W({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=r.width?String(r.width):o;a=e.formattingValues[i]||e.formattingValues[o]}else{var d=e.defaultWidth,s=r.width?String(r.width):e.defaultWidth;a=e.values[s]||e.values[d]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const N={ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function z(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],o=t.match(r);if(!o)return null;var i,d=o[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?H(s,(function(e){return e.test(d)})):O(s,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var l=t.slice(d.length);return{value:i,rest:l}}}function O(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function H(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var X,R={ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(X.matchPattern);if(!n)return null;var a=n[0],r=e.match(X.parsePattern);if(!r)return null;var o=X.valueCallback?X.valueCallback(r[0]):r[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(a.length);return{value:o,rest:i}}),era:z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Q={code:"en-US",formatDistance:function(e,t,n){var a,r=P[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:j,formatRelative:function(e,t,n,a){return q[e]},localize:N,match:R,options:{weekStartsOn:0,firstWeekContainsDate:1}};function G(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function Z(e,t){S(2,arguments);var n=U(e).getTime(),a=G(t);return new Date(n+a)}function J(e,t){S(2,arguments);var n=G(t);return Z(e,-n)}var V=864e5;function $(e){S(1,arguments);var t=1,n=U(e),a=n.getUTCDay(),r=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function _(e){S(1,arguments);var t=U(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=$(a),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=$(o);return t.getTime()>=r.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function K(e){S(1,arguments);var t=_(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=$(n);return a}var ee=6048e5;function te(e,t){S(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.weekStartsOn,o=null==r?0:G(r),i=null==n.weekStartsOn?o:G(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=U(e),s=d.getUTCDay(),c=(s<i?7:0)+s-i;return d.setUTCDate(d.getUTCDate()-c),d.setUTCHours(0,0,0,0),d}function ne(e,t){S(1,arguments);var n=U(e),a=n.getUTCFullYear(),r=t||{},o=r.locale,i=o&&o.options&&o.options.firstWeekContainsDate,d=null==i?1:G(i),s=null==r.firstWeekContainsDate?d:G(r.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(a+1,0,s),c.setUTCHours(0,0,0,0);var l=te(c,t),u=new Date(0);u.setUTCFullYear(a,0,s),u.setUTCHours(0,0,0,0);var m=te(u,t);return n.getTime()>=l.getTime()?a+1:n.getTime()>=m.getTime()?a:a-1}function ae(e,t){S(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,o=null==r?1:G(r),i=null==n.firstWeekContainsDate?o:G(n.firstWeekContainsDate),d=ne(e,t),s=new Date(0);s.setUTCFullYear(d,0,i),s.setUTCHours(0,0,0,0);var c=te(s,t);return c}var re=6048e5;function oe(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const ie=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return oe("yy"===t?a%100:a,t.length)},de=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):oe(n+1,2)},se=function(e,t){return oe(e.getUTCDate(),t.length)},ce=function(e,t){return oe(e.getUTCHours()%12||12,t.length)},le=function(e,t){return oe(e.getUTCHours(),t.length)},ue=function(e,t){return oe(e.getUTCMinutes(),t.length)},me=function(e,t){return oe(e.getUTCSeconds(),t.length)},fe=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return oe(Math.floor(a*Math.pow(10,n-3)),t.length)};var pe={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return ie(e,t)},Y:function(e,t,n,a){var r=ne(e,a),o=r>0?r:1-r;return"YY"===t?oe(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):oe(o,t.length)},R:function(e,t){return oe(_(e),t.length)},u:function(e,t){return oe(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return oe(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return oe(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return de(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return oe(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){S(1,arguments);var n=U(e),a=te(n,t).getTime()-ae(n,t).getTime();return Math.round(a/re)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):oe(r,t.length)},I:function(e,t,n){var a=function(e){S(1,arguments);var t=U(e),n=$(t).getTime()-K(t).getTime();return Math.round(n/ee)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):oe(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):se(e,t)},D:function(e,t,n){var a=function(e){S(1,arguments);var t=U(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),r=n-a;return Math.floor(r/V)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):oe(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return oe(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return oe(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return oe(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return ce(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):le(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):oe(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):oe(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ue(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):me(e,t)},S:function(e,t){return fe(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return he(r);case"XXXX":case"XX":return ge(r);default:return ge(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return he(r);case"xxxx":case"xx":return ge(r);default:return ge(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Ae(r,":");default:return"GMT"+ge(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Ae(r,":");default:return"GMT"+ge(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return oe(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return oe((a._originalDate||e).getTime(),t.length)}};function Ae(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),o=a%60;if(0===o)return n+String(r);var i=t||"";return n+String(r)+i+oe(o,2)}function he(e,t){return e%60==0?(e>0?"-":"+")+oe(Math.abs(e)/60,2):ge(e,t)}function ge(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+oe(Math.floor(r/60),2)+n+oe(r%60,2)}const Ce=pe;function be(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function ye(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const ve={p:ye,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],o=a[2];if(!o)return be(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",be(r,t)).replace("{{time}}",ye(o,t))}};function we(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var xe=["D","DD"],Ee=["YY","YYYY"];function ke(e){return-1!==xe.indexOf(e)}function Be(e){return-1!==Ee.indexOf(e)}function Te(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Ie=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Le=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Me=/^'([^]*?)'?$/,Se=/''/g,De=/[a-zA-Z]/;function Ue(e){return e.match(Me)[1].replace(Se,"'")}const Fe=()=>document.getElementById("folder-name-input").value,Pe=e=>{const t=Array.from(e.children),n=t[t.length-1];e.removeChild(n),n.innerHTML="",n.remove()},We=e=>{const t=e.children[0].innerText;e.innerHTML="",e.style.backgroundColor="#6ACE46";const n=document.createElement("input");n.type="text",n.value=t,e.appendChild(n);const a=document.createElement("i");a.classList.add("fas"),a.classList.add("fa-check"),e.appendChild(a),M.detectSaveEditFolder(a)},je=e=>Array.from(e.children)[0].value,qe=e=>{document.getElementById(e).reset()};n(271);var Ye=n(134);const Ne=e=>{const t=document.createElement("div");e.classList.add("task");const n=document.createElement("input");n.name="task-complete",n.class="task-complete",n.type="checkbox",t.appendChild(n);const a=document.createElement("h2");a.classList.add("folder-name"),a.innerText=e.name,t.appendChild(a);const r=document.createElement("h2");r.classList.add("task-due-date"),r.innerText=e.date,t.appendChild(r);const o=document.createElement("a");o.classList.add("del-btn"),t.appendChild(o);const i=document.createElement("i");return i.classList.add("fas"),i.classList.add("fa-trash-alt"),o.appendChild(i),t},ze=(e,t)=>{const n=g(),a=document.createElement("div");a.id="opaque",C("folder"),(()=>{const e=document.createElement("div");e.classList.add("new-task-container"),e.id="task-form";const t=document.createElement("form");t.id="new-task-form",t.classList.add("new-task"),e.appendChild(t);const n=document.createElement("h2");n.classList.add("form-title"),n.innerText="New Task",t.appendChild(n);const a=document.createElement("div");a.classList.add("form-content"),t.appendChild(a);const r=document.createElement("label");r.for="task-name",r.innerText="Task Name",a.appendChild(r);const o=document.createElement("input");o.type="text",o.name="task-name",o.id="task-name-input",o.classList.add("task-name"),o.placeholder="Task name..",a.appendChild(o);const i=document.createElement("label");i.for="task-date",i.innerText="Due Date",a.appendChild(i);const d=document.createElement("input");d.type="date",d.name="task-date",d.id="task-date",d.placeholder="Due date..",d.min=(()=>{const e=function(e,t,n){S(2,arguments);var a=String(t),r=n||{},o=r.locale||Q,i=o.options&&o.options.firstWeekContainsDate,d=null==i?1:G(i),s=null==r.firstWeekContainsDate?d:G(r.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=o.options&&o.options.weekStartsOn,l=null==c?0:G(c),u=null==r.weekStartsOn?l:G(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var m=U(e);if(!F(m))throw new RangeError("Invalid time value");var f=J(m,we(m)),p={firstWeekContainsDate:s,weekStartsOn:u,locale:o,_originalDate:m};return a.match(Le).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ve[t])(e,o.formatLong,p):e})).join("").match(Ie).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return Ue(n);var i=Ce[a];if(i)return!r.useAdditionalWeekYearTokens&&Be(n)&&Te(n,t,e),!r.useAdditionalDayOfYearTokens&&ke(n)&&Te(n,t,e),i(f,n,o.localize,p);if(a.match(De))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("")}(new Date,"yyyy-MM-dd");return e})(),a.appendChild(d);const s=document.createElement("label");s.for="task-desc",s.innerText="Description",a.appendChild(s);const c=document.createElement("input");c.type="text",c.name="task-desc",c.id="task-desc",c.placeholder="Description..",a.appendChild(c);const l=document.createElement("label");l.for="task-priority",l.innerText="Priority",a.appendChild(l);const u=document.createElement("select");u.name="task-priority",u.id="task-priority",a.appendChild(u);const m=document.createElement("option");m.value="urgent",m.innerText="Urgent",u.appendChild(m);const f=document.createElement("option");f.value="semi-urgent",f.innerText="Semi-Urgent",u.appendChild(f);const p=document.createElement("option");p.value="not-urgent",p.innerText="Not Urgent",u.appendChild(p);const A=document.createElement("label");A.for="task-notes",A.innerText="Notes",a.appendChild(A);const h=document.createElement("textarea");h.name="task-notes",h.id="task-notes",h.cols="30",h.rows="10",h.maxLength="30",a.appendChild(h);const g=document.createElement("div");g.classList.add("form-btns"),a.appendChild(g);const C=document.createElement("button");C.id="create-folder-btn",C.classList.add("form-btn"),C.type="submit",C.innerText="Create",g.appendChild(C);const b=document.createElement("button");b.id="cancel-folder-btn",b.classList.add("form-btn"),b.type="submit",b.innerText="Cancel",g.appendChild(b)})(),(e=>{const t=document.createElement("div");t.classList.add("folders-dir"),t.id="folders-dir";const n=document.createElement("div");n.classList.add("folders"),n.appendChild(t);for(let n=0;n<e.tasks.length;n++){const e=Ne(folders.tasks[n]);e.dataset.index=n,t.appendChild(e)}})(t),e.appendChild(n),e.appendChild(a)},Oe=(()=>{const e=document.getElementById("content"),t=()=>{e.innerHTML=""},n=()=>{(e=>{const t=document.createElement("header");e.appendChild(t);const n=document.createElement("nav");t.appendChild(n);const a=document.createElement("ul");a.classList.add("nav-items"),n.appendChild(a);const r=(()=>{const e=document.createElement("li");e.id="logo-li",e.classList.add("nav-item");const t=new Image;return t.src=Ye,e.appendChild(t),e})();a.appendChild(r);const o=(()=>{const e=document.createElement("li");e.id="search-bar-li",e.classList.add("nav-item");const t=document.createElement("input");t.id="search",t.type="text",t.placeholder="Search..",e.appendChild(t);const n=document.createElement("i");return n.classList.add("fas"),n.classList.add("fa-search"),e.appendChild(n),e})();a.appendChild(o);const i=(()=>{const e=document.createElement("li");e.id="menu-toggle-li",e.classList.add("nav-item");const t=document.createElement("i");return t.id="menu-toggle-btn",t.classList.add("fas"),t.classList.add("fa-bars"),e.appendChild(t),e})();a.appendChild(i)})(e)};return{displayHeader:n,displayMainPage:a=>{t(),n(),((e,t)=>{const n=g(),a=document.createElement("div");a.id="opaque";const r=C("folders"),o=(()=>{const e=document.createElement("div");e.classList.add("new-folder-container"),e.id="folder-form";const t=document.createElement("form");t.id="new-folder-form",t.classList.add("new-folder"),e.appendChild(t);const n=document.createElement("h2");n.classList.add("form-title"),n.innerText="New Folder",t.appendChild(n);const a=document.createElement("div");a.classList.add("form-content"),t.appendChild(a);const r=document.createElement("label");r.for="folder-name",r.innerText="Folder Name",a.appendChild(r);const o=document.createElement("input");o.type="text",o.name="folder-name",o.id="folder-name-input",o.classList.add("folder-name"),o.placeholder="Folder name..",a.appendChild(o);const i=document.createElement("div");i.classList.add("form-btns"),a.appendChild(i);const d=document.createElement("button");d.id="create-folder-btn",d.classList.add("form-btn"),d.type="submit",d.innerText="Create",i.appendChild(d);const s=document.createElement("button");return s.id="cancel-folder-btn",s.classList.add("form-btn"),s.type="submit",s.innerText="Cancel",i.appendChild(s),e})(),i=(e=>{const t=document.createElement("div");t.classList.add("folders-dir"),t.id="folders-dir";const n=document.createElement("div");n.classList.add("folders"),t.appendChild(n);for(let t=0;t<e.length;t++){const a=I(e[t].name);a.dataset.index=t,n.appendChild(a)}return t})(t);e.appendChild(n),e.appendChild(a),e.appendChild(r),e.appendChild(o),e.appendChild(i)})(e,a),M.detectMenuClick(),M.detectAddFolder(),M.detectFolderCancelBtn(),M.detectFolderSubmitBtn()},displayFolderPage:a=>{t(),n(),ze(e,a),M.detectMenuClick(),M.detectBackBtn(),M.detectAddTask(),M.detectTaskCancelBtn(),M.detectTaskSubmitBtn()}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,