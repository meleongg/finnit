(()=>{"use strict";var e={853:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),r=n.n(a),i=n(645),o=n.n(i)()(r());o.push([e.id,':root {\n    color-scheme: normal !important;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n/* Home Page */\n/* Navbar */\nul {\n    display: flex;\n    height: 70px;\n    width: 100%;\n    background-color: #6ACE46;\n    justify-content: space-around;\n}\n\n.nav-item {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n}\n\nbutton:hover, a:hover, #menu-toggle-btn:hover {\n    cursor: pointer;\n}\n\n#search-bar-li i {\n    padding-left: 6px;\n}\n\n#logo-li img {\n    width: 120px;\n    height: 50px;\n}\n\nul i {\n    color: #FFF;\n    font-size: 24px;\n}\n\n/* Menu */\n#menu {\n    background-color: #9FE885;\n    display: none;\n    flex-direction: column;\n    width: 50%;\n    height: calc(100% - 70px);\n    position: fixed;\n    top: 70px;\n    z-index: 0;\n}\n\n/* TODO: add transition to slide in load */\n\n.menu-tab {\n    display: grid;\n    padding: 16px;\n    grid-template-columns: 1fr 4fr;\n    justify-content: center;\n    align-content: center;\n    font-size: 22px;\n}\n\n.menu-tab li {\n    padding-left: 5px;\n}\n\n/* Folders Heading */\n.heading {\n    /* z-index: -2; */\n    font-size: 30px;\n    padding: 30px 0 20px 0;\n    width: 100%;\n    text-align: center;\n}\n\n.add-btn {\n    position: absolute;\n    right: 5px;\n    color: #6ACE46;\n}\n\n.back-btn {\n    position: absolute;\n    left: 5px;\n    color: #6ACE46;\n}\n\n/* New Folder & Task Forms */\n.new-folder-container, .new-task-container {\n    width: 100%;\n}\n\n#folder-form, #task-form {\n    display: none; \n    justify-content: center;\n    align-items: center;\n}\n\ninput[type="text"]:focus, input[type="date"]:focus, select:focus, textarea:focus {\n    outline: none;\n}\n\ninput[type="text"], input[type="date"], select, textarea {\n    border: none;\n    padding: 3px;\n}\n\nselect, input[type="date"], textarea {\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n.new-folder, .new-task {\n    display: grid;\n    row-gap: 10px;\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n    row-gap: 20px;\n}\n\n.form-title {\n    font-size: 22px;\n    text-align: left;\n}\n\n.form-content {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    row-gap: 20px;\n}\n\n.form-btns {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-around;\n}\n\n.form-btn {\n    padding: 5px;\n}\n\n/* Folders Directory */\n.folders-dir, .tasks-list {\n    height: calc(100% - 70px);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#opaque {\n    position: absolute;\n    height: 0;\n    width: 0;\n    top: 70px;\n    left: 50%;\n}\n\n.heading-title {\n    display: inline-block;\n}\n\n/* Folder */\n.folders, .tasks {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 18px;\n}\n\n.folder {\n    display: flex;\n    width: 80%;\n    justify-content: space-between;\n    padding: 10px;\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 1fr 3fr 3fr 1fr;\n    width: 80%;\n    justify-items: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.act-btns a:not(:last-child) {\n    padding-right: 10px;\n}\n\n.folder:hover, .folder:active, .task:hover, .task:active {\n    background-color: #6ACE46;\n    cursor: pointer;\n}\n\n/* Task Container */\n.task-outer-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.task-inner-container {\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n}\n\n.options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.edit-delete-btns {\n    display: flex;\n    justify-content: end;\n    width: 80px;\n}\n\n#edit-task-btn, #delete-task-btn {\n    width: 50%;\n    display: flex;\n    justify-content: center;\n    font-size: 18px;\n}\n\n.task-content {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-details {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-details p {\n    padding: 4px; \n    background-color: #FFF;\n}\n\n.task-details-1 {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: repeat(4, 1fr);\n    align-items: center;\n    column-gap: 20px;\n    row-gap: 10px;\n    padding-top: 10px;\n}\n\n.task-details-2 {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-notes-display {\n    width: 100%;\n    height: 100%;\n}\n\n.task-details-3 {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    align-items: center;\n    column-gap: 20px;\n}\n\n.task-completed-display {\n    justify-self: center;\n}\n\n.finished-btns {\n    padding-top: 20px;\n    display: flex;\n    justify-content: center;\n    align-content: center;\n}\n\n/* Edit Task */\n.edit-task-finished-btns {\n    padding-top: 20px;\n    display: flex;\n    justify-content: space-around;\n    align-content: center;\n}\n\n@media only screen and (min-width: 1200px){\n    /*Tablets [601px -> 1200px]*/\n    #menu {\n        width: 30%;\n    }\n\n    #opaque {\n        left: 30%;\n        width: 70% !important;\n    }\n\n    .add-btn {\n        right: 25px;\n    }\n\n    .back-btn {\n        left: 25px;\n    }\n\n    #new-task-form {\n        width: 50%;\n    }\n}',"",{version:3,sources:["webpack://./src/styles/home-page.css"],names:[],mappings:"AAAA;IACI,+BAA+B;AACnC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,0CAA0C;AAC9C;;AAEA,cAAc;AACd,WAAW;AACX;IACI,aAAa;IACb,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,eAAe;AACnB;;AAEA,SAAS;AACT;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,yBAAyB;IACzB,eAAe;IACf,SAAS;IACT,UAAU;AACd;;AAEA,0CAA0C;;AAE1C;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;IACvB,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA,oBAAoB;AACpB;IACI,iBAAiB;IACjB,eAAe;IACf,sBAAsB;IACtB,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;AAClB;;AAEA,4BAA4B;AAC5B;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,aAAa;IACb,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,YAAY;AAChB;;AAEA,sBAAsB;AACtB;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,SAAS;IACT,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB;;AAEA,WAAW;AACX;IACI,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,UAAU;IACV,8BAA8B;IAC9B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,UAAU;IACV,qBAAqB;IACrB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;AAEA,mBAAmB;AACnB;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,oBAAoB;IACpB,WAAW;AACf;;AAEA;IACI,UAAU;IACV,aAAa;IACb,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kCAAkC;IAClC,mBAAmB;IACnB,gBAAgB;IAChB,aAAa;IACb,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,uBAAuB;IACvB,qBAAqB;AACzB;;AAEA,cAAc;AACd;IACI,iBAAiB;IACjB,aAAa;IACb,6BAA6B;IAC7B,qBAAqB;AACzB;;AAEA;IACI,4BAA4B;IAC5B;QACI,UAAU;IACd;;IAEA;QACI,SAAS;QACT,qBAAqB;IACzB;;IAEA;QACI,WAAW;IACf;;IAEA;QACI,UAAU;IACd;;IAEA;QACI,UAAU;IACd;AACJ",sourcesContent:[':root {\n    color-scheme: normal !important;\n}\n\n#content {\n    display: flex;\n    flex-direction: column;\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n/* Home Page */\n/* Navbar */\nul {\n    display: flex;\n    height: 70px;\n    width: 100%;\n    background-color: #6ACE46;\n    justify-content: space-around;\n}\n\n.nav-item {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nbutton {\n    border: none;\n}\n\nbutton:hover, a:hover, #menu-toggle-btn:hover {\n    cursor: pointer;\n}\n\n#search-bar-li i {\n    padding-left: 6px;\n}\n\n#logo-li img {\n    width: 120px;\n    height: 50px;\n}\n\nul i {\n    color: #FFF;\n    font-size: 24px;\n}\n\n/* Menu */\n#menu {\n    background-color: #9FE885;\n    display: none;\n    flex-direction: column;\n    width: 50%;\n    height: calc(100% - 70px);\n    position: fixed;\n    top: 70px;\n    z-index: 0;\n}\n\n/* TODO: add transition to slide in load */\n\n.menu-tab {\n    display: grid;\n    padding: 16px;\n    grid-template-columns: 1fr 4fr;\n    justify-content: center;\n    align-content: center;\n    font-size: 22px;\n}\n\n.menu-tab li {\n    padding-left: 5px;\n}\n\n/* Folders Heading */\n.heading {\n    /* z-index: -2; */\n    font-size: 30px;\n    padding: 30px 0 20px 0;\n    width: 100%;\n    text-align: center;\n}\n\n.add-btn {\n    position: absolute;\n    right: 5px;\n    color: #6ACE46;\n}\n\n.back-btn {\n    position: absolute;\n    left: 5px;\n    color: #6ACE46;\n}\n\n/* New Folder & Task Forms */\n.new-folder-container, .new-task-container {\n    width: 100%;\n}\n\n#folder-form, #task-form {\n    display: none; \n    justify-content: center;\n    align-items: center;\n}\n\ninput[type="text"]:focus, input[type="date"]:focus, select:focus, textarea:focus {\n    outline: none;\n}\n\ninput[type="text"], input[type="date"], select, textarea {\n    border: none;\n    padding: 3px;\n}\n\nselect, input[type="date"], textarea {\n    font-family: \'Source Sans Pro\', sans-serif;\n}\n\n.new-folder, .new-task {\n    display: grid;\n    row-gap: 10px;\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n    row-gap: 20px;\n}\n\n.form-title {\n    font-size: 22px;\n    text-align: left;\n}\n\n.form-content {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    row-gap: 20px;\n}\n\n.form-btns {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-around;\n}\n\n.form-btn {\n    padding: 5px;\n}\n\n/* Folders Directory */\n.folders-dir, .tasks-list {\n    height: calc(100% - 70px);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n#opaque {\n    position: absolute;\n    height: 0;\n    width: 0;\n    top: 70px;\n    left: 50%;\n}\n\n.heading-title {\n    display: inline-block;\n}\n\n/* Folder */\n.folders, .tasks {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    font-size: 18px;\n}\n\n.folder {\n    display: flex;\n    width: 80%;\n    justify-content: space-between;\n    padding: 10px;\n}\n\n.task {\n    display: grid;\n    grid-template-columns: 1fr 3fr 3fr 1fr;\n    width: 80%;\n    justify-items: center;\n    align-items: center;\n    padding: 10px;\n}\n\n.act-btns a:not(:last-child) {\n    padding-right: 10px;\n}\n\n.folder:hover, .folder:active, .task:hover, .task:active {\n    background-color: #6ACE46;\n    cursor: pointer;\n}\n\n/* Task Container */\n.task-outer-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.task-inner-container {\n    background-color: #6ACE46;\n    width: 90%;\n    padding: 15px;\n}\n\n.options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.edit-delete-btns {\n    display: flex;\n    justify-content: end;\n    width: 80px;\n}\n\n#edit-task-btn, #delete-task-btn {\n    width: 50%;\n    display: flex;\n    justify-content: center;\n    font-size: 18px;\n}\n\n.task-content {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-details {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-details p {\n    padding: 4px; \n    background-color: #FFF;\n}\n\n.task-details-1 {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: repeat(4, 1fr);\n    align-items: center;\n    column-gap: 20px;\n    row-gap: 10px;\n    padding-top: 10px;\n}\n\n.task-details-2 {\n    display: grid;\n    row-gap: 10px;\n}\n\n.task-notes-display {\n    width: 100%;\n    height: 100%;\n}\n\n.task-details-3 {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    align-items: center;\n    column-gap: 20px;\n}\n\n.task-completed-display {\n    justify-self: center;\n}\n\n.finished-btns {\n    padding-top: 20px;\n    display: flex;\n    justify-content: center;\n    align-content: center;\n}\n\n/* Edit Task */\n.edit-task-finished-btns {\n    padding-top: 20px;\n    display: flex;\n    justify-content: space-around;\n    align-content: center;\n}\n\n@media only screen and (min-width: 1200px){\n    /*Tablets [601px -> 1200px]*/\n    #menu {\n        width: 30%;\n    }\n\n    #opaque {\n        left: 30%;\n        width: 70% !important;\n    }\n\n    .add-btn {\n        right: 25px;\n    }\n\n    .back-btn {\n        left: 25px;\n    }\n\n    #new-task-form {\n        width: 50%;\n    }\n}'],sourceRoot:""}]);const d=o},434:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(537),r=n.n(a),i=n(645),o=n.n(i)()(r());o.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n* {\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const d=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(o[s]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);a&&o[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(r," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var i={},o=[],d=0;d<e.length;d++){var s=e[d],c=a.base?s[0]+a.base:s[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var m=n(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var A=r(p,a);a.byIndex=d,t.splice(d,0,{identifier:u,updater:A,references:1})}o.push(u)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=a(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var d=n(i[o]);t[d].references--}for(var s=a(e,r),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=s}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},271:(e,t,n)=>{e.exports=n.p+"411041d6cc347d421ae3.png"},134:(e,t,n)=>{e.exports=n.p+"0b347cb08a78889191c4.png"}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),i=n(569),o=n.n(i),d=n(565),s=n.n(d),c=n(216),l=n.n(c),u=n(589),m=n.n(u),p=n(434),A={};A.styleTagTransform=m(),A.setAttributes=s(),A.insert=o().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=l(),t()(p.Z,A),p.Z&&p.Z.locals&&p.Z.locals;var f=n(853),h={};h.styleTagTransform=m(),h.setAttributes=s(),h.insert=o().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),t()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const g=()=>{const e=document.createElement("div");e.id="menu";const t=document.createElement("div");t.id="folders-title",t.classList.add("menu-tab"),e.appendChild(t);const n=document.createElement("i");n.classList.add("fas"),n.classList.add("fa-folder"),t.appendChild(n);const a=document.createElement("a");a.classList.add("menu-title"),a.innerText="Folders",t.appendChild(a);const r=document.createElement("div");r.id="today-title",r.classList.add("menu-tab"),e.appendChild(r);const i=document.createElement("i");i.classList.add("fas"),i.classList.add("fa-calendar-day"),r.appendChild(i);const o=document.createElement("a");o.classList.add("menu-title"),o.innerText="Today",r.appendChild(o);const d=document.createElement("div");d.id="this-week-title",d.classList.add("menu-tab"),e.appendChild(d);const s=document.createElement("i");s.classList.add("fas"),s.classList.add("fa-calendar-week"),d.appendChild(s);const c=document.createElement("a");c.classList.add("menu-title"),c.innerText="This Week",d.appendChild(c);const l=document.createElement("div");l.id="folders-title",l.classList.add("menu-tab"),e.appendChild(l);const u=document.createElement("i");u.classList.add("fas"),u.classList.add("fa-tasks"),l.appendChild(u);const m=document.createElement("a");return m.classList.add("menu-title"),m.innerText="All Tasks",l.appendChild(m),e},C=(e,t)=>{const n=document.createElement("div");n.classList.add("heading"),n.id="heading";const a=document.createElement("h1");if(a.classList.add("heading-title"),a.innerText=`${e[0].toUpperCase()+e.substring(1)}`,n.appendChild(a),"folders"!==e){const e=document.createElement("a");e.id="back-btn",e.classList.add("back-btn"),n.appendChild(e);const t=document.createElement("i");t.classList.add("fas"),t.classList.add("fa-chevron-circle-left"),e.appendChild(t)}if(t){const t=document.createElement("a");t.classList.add("add-btn"),t.id="folders"===e?"add-folders-btn":"add-task-btn",n.appendChild(t);const a=document.createElement("i");a.classList.add("fas"),a.classList.add("fa-plus-circle"),t.appendChild(a)}return n},y=()=>document.getElementsByClassName("heading-title")[0].innerText,b=e=>{const t=document.getElementById(e);"none"!==window.getComputedStyle(t).display?t.style.display="none":["folder-form","task-form"].includes(e)?t.style.display="flex":[].includes(e)?t.style.display="grid":["add-folders-btn","add-task-btn"].includes(e)?t.style.display="inline-block":t.style.display="block"},v=()=>{const e=document.getElementById("opaque");let t=window.getComputedStyle(e).backgroundColor;const n=document.getElementsByClassName("heading")[0];"rgba(0, 0, 0, 0)"===t?(e.style.backgroundColor="rgba(0, 0, 0, 0.6)",e.style.height="calc(100% - 70px)",e.style.width="50%",n.style.zIndex="-2"):(e.style.backgroundColor="rgba(0, 0, 0, 0)",e.style.height="0",e.style.width="0",n.style.zIndex="0")},k=e=>{alert(e)},w=e=>0===e.length,E=(e,t)=>{const n=(e=>{let t=[];for(let n=0;n<e.length;n++)t.push(e[n].name);return t})(t);return!!n.includes(e)},B=e=>""===e.replace(/\s/g,""),x=e=>0==e,I=(e,t)=>(console.log(e,t),e===t),T=e=>{for(let t=0;t<e.length;t++)""===e[t]&&(e[t]="N/A");return e};class L{constructor(e,t,n,a,r,i){this.name=e,this.date=t,this.desc=n,this.priority=a,this.notes=r,this.status="unchecked",this.folder=i}toggleStatus=()=>{"unchecked"===this.status?this.status="checked":this.status="unchecked"};getFolder=()=>this.folder;getName=()=>this.name;getDate=()=>this.date;getDesc=()=>this.desc;getPriority=()=>this.priority;getNotes=()=>this.notes;getStatus=()=>this.status;setName=e=>{this.name=e};setDate=e=>{this.date=e};setDesc=e=>{this.desc=e};setPriority=e=>{this.priority=e};setNotes=e=>{this.notes=e};setStatus=e=>{this.status=e}}class M{constructor(e,t=[]){this.name=e,this.tasks=t}createTask=e=>{const t=e[0],n=e[1],a=e[2],r=e[3],i=e[4],o=e[5];return new L(t,n,a,r,i,o)};updateTaskStatus=e=>{this.tasks[e].toggleStatus()};addTask=e=>{this.tasks.push(e)};editTask=(e,t)=>{let n=t[0],a=t[1],r=t[2],i=t[3],o=t[4],d=t[5];e.name=n,e.date=a,e.desc=r,e.priority=i,e.notes=o,e.status=d};deleteTask=e=>{this.tasks.splice(e,1)};getTaskByIndex=e=>this.tasks[e];getTaskByName=e=>{for(let t=0;t<this.tasks.length;t++)if(this.tasks[t].name===e)return this.tasks[t]}}const S=e=>{const t=document.createElement("div");t.classList.add("folder");const n=document.createElement("h2");n.classList.add("folder-name"),n.innerText=e,t.appendChild(n),U.detectFolderClick(n);const a=document.createElement("div");a.classList.add("act-btns"),t.appendChild(a);const r=document.createElement("a");r.classList.add("edit-btn"),a.appendChild(r);const i=document.createElement("i");i.classList.add("fas"),i.classList.add("fa-edit"),r.appendChild(i),U.detectEditFolder(i);const o=document.createElement("a");o.classList.add("del-btn"),a.appendChild(o);const d=document.createElement("i");return d.classList.add("fas"),d.classList.add("fa-trash-alt"),o.appendChild(d),U.detectDeleteFolder(d),t},F=(()=>{let e=[new M("Inbox",[])];return{addFolder:t=>{if(w(e)){let n=new M(t,[]);e.push(n),Ve.displayMainPage(e)}else if(E(t,e))Ge("new-folder-form"),k("Folder already exists!");else if(B(t))Ge("new-folder-form"),k("Folder name cannot be empty!");else{let n=new M(t,[]);e.push(n),Ve.displayMainPage(e)}},deleteFolder:(t,n)=>{x(t)?k(`Cannot delete ${e[t].name}!`):(e.splice(t,1),Ve.displayMainPage(e))},editFolder:(t,n,a,r)=>{I(a,r)?(e[t].name=a,Ve.displayMainPage(e)):E(a,e)?k("Folder already exists!"):B(a)?k("Folder name cannot be empty!"):(e[t].name=a,Ve.displayMainPage(e))},getFolders:()=>e,getFolder:t=>e[t],refreshFolderPage:e=>{Ve.displayFolderPage(e)},getFolderByName:t=>{for(let n=0;n<e.length;n++)if(e[n].name===t)return e[n]}}})(),D=e=>{const t=document.createElement("div");t.classList.add("task-outer-container"),t.dataset.folder=e.getFolder();const n=document.createElement("div");n.classList.add("task-inner-container"),t.appendChild(n);const a=document.createElement("div");a.classList.add("task-content"),n.appendChild(a);const r=(e=>{const t=document.createElement("div");t.classList.add("options");const n=document.createElement("h2");n.classList.add("task-name"),n.innerText=e,t.appendChild(n);const a=document.createElement("div");a.classList.add("edit-delete-btns"),t.appendChild(a);const r=document.createElement("a");r.id="edit-task-btn",a.appendChild(r);const i=document.createElement("i");return i.classList.add("fa-solid"),i.classList.add("fa-pen-to-square"),r.appendChild(i),U.detectEditTask(i),t})(e.name);a.appendChild(r);const i=(e=>{const t=document.createElement("div");t.classList.add("task-details");const n=[e.name,e.date,e.desc,e.priority],a=e.notes,r=e.status,i=(e=>{const t=["Name:","Deadline:","Description:","Priority:"],n=document.createElement("div");n.classList.add("task-details-1");for(let a=0;a<e.length;a++){const r=document.createElement("h3");r.classList.add("task-details1-label"),r.innerText=t[a],n.appendChild(r);const i=document.createElement("p");i.classList.add("task-details1-display"),i.innerText=e[a],n.appendChild(i)}return n})(n);t.appendChild(i);const o=(e=>{const t=document.createElement("div");t.classList.add("task-details-2");const n=document.createElement("h3");n.classList.add("task-notes-label"),n.innerText="Notes:",t.appendChild(n);const a=document.createElement("p");return a.classList.add("task-notes-display"),a.innerText=`${e[0].toUpperCase()+e.substring(1)}`,t.appendChild(a),t})(a);t.appendChild(o);const d=(e=>{const t=document.createElement("div");t.classList.add("task-details-3");const n=document.createElement("h3");n.classList.add("task-completed-label"),n.innerText="Status:",t.appendChild(n);const a=document.createElement("p");return a.classList.add("task-completed-display"),a.innerText=e?"Complete":"Incomplete",t.appendChild(a),t})(r);return t.appendChild(d),t})(e);a.appendChild(i);const o=(()=>{const e=document.createElement("div");e.classList.add("finished-btns");const t=document.createElement("button");return t.classList.add("form-btn"),t.id="done-task-btn",t.type="submit",t.innerText="Done",U.detectExitTask(t),e.appendChild(t),e})();return a.appendChild(o),t},P=()=>document.getElementsByClassName("task-outer-container")[0],U=(()=>{const e=()=>{document.getElementById("cancel-task-btn").addEventListener("click",(e=>{e.preventDefault(),Ge("new-task-form"),b("task-form"),b("add-task-btn")}))},t=()=>{document.getElementById("create-task-btn").addEventListener("click",(e=>{e.preventDefault(),b("task-form"),b("add-task-btn");let t=Re();Ge("new-task-form");let n=y(),a=F.getFolderByName(n);t.push(a.name);let r=a.createTask(t);a.addTask(r),F.refreshFolderPage(a)}))};return{detectMenuClick:()=>{document.getElementById("menu-toggle-btn").addEventListener("click",(()=>{b("menu"),v()})),document.getElementById("opaque").addEventListener("click",(()=>{b("menu"),v()}))},detectAddFolder:()=>{document.getElementById("add-folders-btn").addEventListener("click",(()=>{b("add-folders-btn"),b("folder-form")}))},detectFolderCancelBtn:()=>{document.getElementById("cancel-folder-btn").addEventListener("click",(e=>{e.preventDefault(),Ge("new-folder-form"),b("folder-form"),b("add-folders-btn")}))},detectFolderSubmitBtn:()=>{document.getElementById("create-folder-btn").addEventListener("click",(e=>{e.preventDefault(),b("folder-form"),b("add-folders-btn");let t=Ye();Ge("new-folder-form"),F.addFolder(t)}))},detectEditFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.parentElement.parentElement,n=t.children[0].innerText;t.dataset.oldName=n,ze(t),Oe(t)}))},detectDeleteFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.parentElement.parentElement,n=t.dataset.index;F.deleteFolder(n,t)}))},detectSaveEditFolder:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement,n=t.dataset.index,a=He(t),r=t.dataset.oldName;F.editFolder(n,t,a,r)}))},detectFolderClick:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.dataset.index;const n=F.getFolder(t);Ve.displayFolderPage(n)}))},detectBackHomeBtn:()=>{document.getElementById("back-btn").addEventListener("click",(()=>{const e=F.getFolders();Ve.displayMainPage(e)}))},detectBackFolderBtn:()=>{document.getElementById("back-btn").addEventListener("click",(()=>{const e=P().dataset.folder,t=F.getFolderByName(e);Ve.displayFolderPage(t)}))},detectAddTask:()=>{document.getElementById("add-task-btn").addEventListener("click",(()=>{b("add-task-btn"),b("task-form"),e(),t()}))},detectTaskCancelBtn:e,detectTaskSubmitBtn:t,detectDeleteTask:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.parentElement.dataset.index,n=y(),a=F.getFolderByName(n);a.deleteTask(t),F.refreshFolderPage(a)}))},detectTaskCheckbox:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.dataset.index,n=y(),a=F.getFolderByName(n);a.updateTaskStatus(t),F.refreshFolderPage(a)}))},detectTaskClick:e=>{e.addEventListener("click",(e=>{let t=e.target.parentElement.dataset.index,n=y();const a=F.getFolderByName(n).getTaskByIndex(t);Ve.displayTaskPage(a)}))},detectExitTask:e=>{e.addEventListener("click",(()=>{const e=P().dataset.folder,t=F.getFolderByName(e);Ve.displayFolderPage(t)}))},detectEditTask:e=>{e.addEventListener("click",(()=>{const e=P();let t=document.getElementsByClassName("task-name")[0].innerText;const n=e.dataset.folder,a=F.getFolderByName(n).getTaskByName(t);Qe(e,a)}))},detectCancelEditTask:e=>{e.addEventListener("click",(e=>{e.preventDefault();let t=document.getElementsByClassName("task-outer-container")[0],n=document.getElementsByClassName("task-inner-container")[0];t.display="none",n.reset();let a=t.dataset.folder,r=F.getFolderByName(a);F.refreshFolderPage(r)}))},detectSaveEditTask:e=>{e.addEventListener("click",(e=>{e.preventDefault();let t=document.getElementsByClassName("task-outer-container")[0].dataset.folder,n=F.getFolderByName(t),a=document.getElementsByClassName("task-name")[0].innerText,r=n.getTaskByName(a),i=Xe();n.editTask(r,i),document.getElementsByClassName("task-inner-container")[0].reset(),F.refreshFolderPage(n)}))}}})();function N(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function j(e){return N(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function W(e){N(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function q(e){if(N(1,arguments),!j(e)&&"number"!=typeof e)return!1;var t=W(e);return!isNaN(Number(t))}var Y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function z(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}const O={date:z({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:z({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:z({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var H={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Q(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=r.width?String(r.width):i;a=e.formattingValues[o]||e.formattingValues[i]}else{var d=e.defaultWidth,s=r.width?String(r.width):e.defaultWidth;a=e.values[s]||e.values[d]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const X={ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Q({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Q({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Q({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Q({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Q({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function R(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var o,d=i[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?Z(s,(function(e){return e.test(d)})):G(s,(function(e){return e.test(d)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(d.length);return{value:o,rest:l}}}function G(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function Z(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var J,V={ordinalNumber:(J={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(J.matchPattern);if(!n)return null;var a=n[0],r=e.match(J.parsePattern);if(!r)return null;var i=J.valueCallback?J.valueCallback(r[0]):r[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(a.length);return{value:i,rest:o}}),era:R({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:R({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:R({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:R({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:R({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const $={code:"en-US",formatDistance:function(e,t,n){var a,r=Y[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:O,formatRelative:function(e,t,n,a){return H[e]},localize:X,match:V,options:{weekStartsOn:0,firstWeekContainsDate:1}};function _(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function K(e,t){N(2,arguments);var n=W(e).getTime(),a=_(t);return new Date(n+a)}function ee(e,t){N(2,arguments);var n=_(t);return K(e,-n)}var te=864e5;function ne(e){N(1,arguments);var t=1,n=W(e),a=n.getUTCDay(),r=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function ae(e){N(1,arguments);var t=W(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=ne(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=ne(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function re(e){N(1,arguments);var t=ae(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=ne(n);return a}var ie=6048e5;function oe(e,t){N(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.weekStartsOn,i=null==r?0:_(r),o=null==n.weekStartsOn?i:_(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=W(e),s=d.getUTCDay(),c=(s<o?7:0)+s-o;return d.setUTCDate(d.getUTCDate()-c),d.setUTCHours(0,0,0,0),d}function de(e,t){N(1,arguments);var n=W(e),a=n.getUTCFullYear(),r=t||{},i=r.locale,o=i&&i.options&&i.options.firstWeekContainsDate,d=null==o?1:_(o),s=null==r.firstWeekContainsDate?d:_(r.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(a+1,0,s),c.setUTCHours(0,0,0,0);var l=oe(c,t),u=new Date(0);u.setUTCFullYear(a,0,s),u.setUTCHours(0,0,0,0);var m=oe(u,t);return n.getTime()>=l.getTime()?a+1:n.getTime()>=m.getTime()?a:a-1}function se(e,t){N(1,arguments);var n=t||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,i=null==r?1:_(r),o=null==n.firstWeekContainsDate?i:_(n.firstWeekContainsDate),d=de(e,t),s=new Date(0);s.setUTCFullYear(d,0,o),s.setUTCHours(0,0,0,0);var c=oe(s,t);return c}var ce=6048e5;function le(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const ue=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return le("yy"===t?a%100:a,t.length)},me=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):le(n+1,2)},pe=function(e,t){return le(e.getUTCDate(),t.length)},Ae=function(e,t){return le(e.getUTCHours()%12||12,t.length)},fe=function(e,t){return le(e.getUTCHours(),t.length)},he=function(e,t){return le(e.getUTCMinutes(),t.length)},ge=function(e,t){return le(e.getUTCSeconds(),t.length)},Ce=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return le(Math.floor(a*Math.pow(10,n-3)),t.length)};var ye={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return ue(e,t)},Y:function(e,t,n,a){var r=de(e,a),i=r>0?r:1-r;return"YY"===t?le(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):le(i,t.length)},R:function(e,t){return le(ae(e),t.length)},u:function(e,t){return le(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return le(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return le(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return me(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return le(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var r=function(e,t){N(1,arguments);var n=W(e),a=oe(n,t).getTime()-se(n,t).getTime();return Math.round(a/ce)+1}(e,a);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):le(r,t.length)},I:function(e,t,n){var a=function(e){N(1,arguments);var t=W(e),n=ne(t).getTime()-re(t).getTime();return Math.round(n/ie)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):le(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):pe(e,t)},D:function(e,t,n){var a=function(e){N(1,arguments);var t=W(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),r=n-a;return Math.floor(r/te)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):le(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return le(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return le(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return le(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return Ae(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):fe(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):le(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):le(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):he(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ge(e,t)},S:function(e,t){return Ce(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ve(r);case"XXXX":case"XX":return ke(r);default:return ke(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return ve(r);case"xxxx":case"xx":return ke(r);default:return ke(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+be(r,":");default:return"GMT"+ke(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+be(r,":");default:return"GMT"+ke(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return le(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return le((a._originalDate||e).getTime(),t.length)}};function be(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+le(i,2)}function ve(e,t){return e%60==0?(e>0?"-":"+")+le(Math.abs(e)/60,2):ke(e,t)}function ke(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+le(Math.floor(r/60),2)+n+le(r%60,2)}const we=ye;function Ee(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function Be(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const xe={p:Be,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return Ee(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Ee(r,t)).replace("{{time}}",Be(i,t))}};function Ie(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var Te=["D","DD"],Le=["YY","YYYY"];function Me(e){return-1!==Te.indexOf(e)}function Se(e){return-1!==Le.indexOf(e)}function Fe(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var De=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Pe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ue=/^'([^]*?)'?$/,Ne=/''/g,je=/[a-zA-Z]/;function We(e){return e.match(Ue)[1].replace(Ne,"'")}const qe=()=>{const e=function(e,t,n){N(2,arguments);var a=String(t),r=n||{},i=r.locale||$,o=i.options&&i.options.firstWeekContainsDate,d=null==o?1:_(o),s=null==r.firstWeekContainsDate?d:_(r.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,l=null==c?0:_(c),u=null==r.weekStartsOn?l:_(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var m=W(e);if(!q(m))throw new RangeError("Invalid time value");var p=Ie(m),A=ee(m,p),f={firstWeekContainsDate:s,weekStartsOn:u,locale:i,_originalDate:m};return a.match(Pe).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,xe[t])(e,i.formatLong,f):e})).join("").match(De).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return We(n);var o=we[a];if(o)return!r.useAdditionalWeekYearTokens&&Se(n)&&Fe(n,t,e),!r.useAdditionalDayOfYearTokens&&Me(n)&&Fe(n,t,e),o(A,n,i.localize,f);if(a.match(je))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("")}(new Date,"yyyy-MM-dd");return e},Ye=()=>document.getElementById("folder-name-input").value,ze=e=>{const t=Array.from(e.children),n=t[t.length-1];e.removeChild(n),n.innerHTML="",n.remove()},Oe=e=>{const t=e.children[0].innerText;e.innerHTML="",e.style.backgroundColor="#6ACE46";const n=document.createElement("input");n.type="text",n.value=t,e.appendChild(n);const a=document.createElement("i");a.classList.add("fas"),a.classList.add("fa-check"),e.appendChild(a),U.detectSaveEditFolder(a)},He=e=>Array.from(e.children)[0].value,Qe=(e,t)=>{e.innerHTML="";const n=document.createElement("form");n.classList.add("task-inner-container"),e.appendChild(n);const a=document.createElement("div");a.classList.add("task-content"),n.appendChild(a);const r=(e=>{const t=document.createElement("div"),n=document.createElement("h2");return n.classList.add("task-name"),n.innerText=e.name,t.appendChild(n),t})(t);a.appendChild(r);const i=(e=>{const t=document.createElement("div");t.classList.add("task-details");const n=[e.name,e.date,e.desc,e.priority],a=e.notes,r=e.status,i=(e=>{const t=document.createElement("div");return t.classList.add("task-details-1"),((e,t)=>{const n=document.createElement("h3");n.classList.add("task-details1-label"),n.innerText="Name:",t.appendChild(n);const a=document.createElement("input");a.type="text",a.id="edit-task-name",a.value=e,a.classList.add("task-details1-display"),t.appendChild(a)})(e[0],t),(e=>{const t=document.createElement("label");t.for="task-date",t.innerText="Due Date",e.appendChild(t);const n=document.createElement("input");n.type="date",n.name="task-date",n.id="edit-task-date",n.placeholder="Due date..",n.min=qe(),e.appendChild(n)})(t),((e,t)=>{const n=document.createElement("h3");n.classList.add("task-details1-label"),n.innerText="Description:",t.appendChild(n);const a=document.createElement("input");a.type="text",a.id="edit-task-desc",a.value=e,a.classList.add("task-details1-display"),t.appendChild(a)})(e[2],t),(e=>{const t=document.createElement("label");t.for="task-priority",t.innerText="Priority:",e.appendChild(t);const n=document.createElement("select");n.name="task-priority",n.id="edit-task-priority",e.appendChild(n);const a=document.createElement("option");a.value="urgent",a.innerText="Urgent",n.appendChild(a);const r=document.createElement("option");r.value="semi-urgent",r.innerText="Semi-Urgent",n.appendChild(r);const i=document.createElement("option");i.value="not-urgent",i.innerText="Not Urgent",n.appendChild(i)})(t),t})(n);t.appendChild(i);const o=(e=>{const t=document.createElement("div");t.classList.add("task-details-2");const n=document.createElement("h3");n.classList.add("task-notes-label"),n.innerText="Notes:",t.appendChild(n);const a=document.createElement("input");return a.type="text",a.id="edit-task-notes",a.value=e,a.classList.add("task-notes-display"),t.appendChild(a),t})(a);t.appendChild(o);const d=(e=>{const t=document.createElement("div");t.classList.add("task-details-3");const n=document.createElement("h3");n.classList.add("task-completed-label"),n.innerText="Status:",t.appendChild(n);const a=document.createElement("input");return a.type="checkbox",a.id="edit-task-status",a.classList.add("task-completed-display"),a.checked=e?"true":"false",t.appendChild(a),t})(r);return t.appendChild(d),t})(t);a.appendChild(i);const o=(()=>{const e=document.createElement("div");e.classList.add("edit-task-finished-btns");const t=document.createElement("button");t.classList.add("form-btn"),t.id="save-edit-task-btn",t.type="submit",t.innerText="Save",U.detectSaveEditTask(t);const n=document.createElement("button");return n.classList.add("form-btn"),n.id="cancel-edit-task-btn",n.type="submit",n.innerText="Cancel",U.detectCancelEditTask(n),e.appendChild(t),e.appendChild(n),e})();a.appendChild(o)},Xe=e=>{let t=[];const n=document.getElementById("edit-task-name").value,a=document.getElementById("edit-task-date").value,r=document.getElementById("edit-task-desc").value,i=document.getElementById("edit-task-priority").selectedOptions[0].value,o=document.getElementById("edit-task-notes").value,d=document.getElementById("edit-task-status").checked;return t.push(n,a,r,i,o,d),t=T(t),t},Re=()=>{let e=[];const t=document.getElementById("task-name").value,n=document.getElementById("task-date").value,a=document.getElementById("task-desc").value,r=document.getElementById("task-priority").selectedOptions[0].value,i=document.getElementById("task-notes").value;return e.push(t,n,a,r,i),e=T(e),e},Ge=e=>{document.getElementById(e).reset()};var Ze=n(271);n(134);const Je=e=>{const t=document.createElement("div");t.classList.add("task");const n=document.createElement("input");n.name="task-complete",n.class="task-complete",n.type="checkbox","checked"===e.status?n.checked=!0:n.checked=!1,t.appendChild(n),U.detectTaskCheckbox(n);const a=document.createElement("h2");a.classList.add("folder-name"),a.innerText=e.name,t.appendChild(a),U.detectTaskClick(a);const r=document.createElement("h2");r.classList.add("task-due-date"),r.innerText=e.date,t.appendChild(r);const i=document.createElement("a");i.classList.add("del-btn"),t.appendChild(i);const o=document.createElement("i");return o.classList.add("fas"),o.classList.add("fa-trash-alt"),i.appendChild(o),U.detectDeleteTask(o),t},Ve=(()=>{const e=document.getElementById("content"),t=()=>{e.innerHTML=""},n=()=>{(e=>{const t=document.createElement("header");e.appendChild(t);const n=document.createElement("nav");t.appendChild(n);const a=document.createElement("ul");a.classList.add("nav-items"),n.appendChild(a);const r=(()=>{const e=document.createElement("li");e.id="logo-li",e.classList.add("nav-item");const t=new Image;return t.src=Ze,e.appendChild(t),e})();a.appendChild(r);const i=(()=>{const e=document.createElement("li");e.id="menu-toggle-li",e.classList.add("nav-item");const t=document.createElement("i");return t.id="menu-toggle-btn",t.classList.add("fas"),t.classList.add("fa-bars"),e.appendChild(t),e})();a.appendChild(i)})(e)};return{displayHeader:n,displayMainPage:a=>{t(),n(),((e,t)=>{const n=g(),a=document.createElement("div");a.id="opaque";const r=C("folders",!0),i=(()=>{const e=document.createElement("div");e.classList.add("new-folder-container"),e.id="folder-form";const t=document.createElement("form");t.id="new-folder-form",t.classList.add("new-folder"),e.appendChild(t);const n=document.createElement("h2");n.classList.add("form-title"),n.innerText="New Folder",t.appendChild(n);const a=document.createElement("div");a.classList.add("form-content"),t.appendChild(a);const r=document.createElement("label");r.for="folder-name",r.innerText="Folder Name",a.appendChild(r);const i=document.createElement("input");i.type="text",i.name="folder-name",i.id="folder-name-input",i.classList.add("folder-name"),i.placeholder="Folder name..",a.appendChild(i);const o=document.createElement("div");o.classList.add("form-btns"),a.appendChild(o);const d=document.createElement("button");d.id="create-folder-btn",d.classList.add("form-btn"),d.type="submit",d.innerText="Create",o.appendChild(d);const s=document.createElement("button");return s.id="cancel-folder-btn",s.classList.add("form-btn"),s.type="submit",s.innerText="Cancel",o.appendChild(s),e})(),o=(e=>{const t=document.createElement("div");t.classList.add("folders-dir"),t.id="folders-dir";const n=document.createElement("div");n.classList.add("folders"),t.appendChild(n);for(let t=0;t<e.length;t++){const a=S(e[t].name);a.dataset.index=t,n.appendChild(a)}return t})(t);e.appendChild(n),e.appendChild(a),e.appendChild(r),e.appendChild(i),e.appendChild(o)})(e,a),U.detectMenuClick(),U.detectAddFolder(),U.detectFolderCancelBtn(),U.detectFolderSubmitBtn()},displayFolderPage:a=>{t(),n(),((e,t)=>{const n=g(),a=document.createElement("div");a.id="opaque";const r=C(t.name,!0),i=(()=>{const e=document.createElement("div");e.classList.add("new-task-container"),e.id="task-form";const t=document.createElement("form");t.id="new-task-form",t.classList.add("new-task"),e.appendChild(t);const n=document.createElement("h2");n.classList.add("form-title"),n.innerText="New Task",t.appendChild(n);const a=document.createElement("div");a.classList.add("form-content"),t.appendChild(a);const r=document.createElement("label");r.for="task-name",r.innerText="Task Name",a.appendChild(r);const i=document.createElement("input");i.type="text",i.name="task-name",i.id="task-name",i.classList.add("task-name"),i.placeholder="Task name..",a.appendChild(i);const o=document.createElement("label");o.for="task-date",o.innerText="Due Date",a.appendChild(o);const d=document.createElement("input");d.type="date",d.name="task-date",d.id="task-date",d.placeholder="Due date..",d.min=qe(),a.appendChild(d);const s=document.createElement("label");s.for="task-desc",s.innerText="Description",a.appendChild(s);const c=document.createElement("input");c.type="text",c.name="task-desc",c.id="task-desc",c.placeholder="Description..",a.appendChild(c);const l=document.createElement("label");l.for="task-priority",l.innerText="Priority",a.appendChild(l);const u=document.createElement("select");u.name="task-priority",u.id="task-priority",a.appendChild(u);const m=document.createElement("option");m.value="urgent",m.innerText="Urgent",u.appendChild(m);const p=document.createElement("option");p.value="semi-urgent",p.innerText="Semi-Urgent",u.appendChild(p);const A=document.createElement("option");A.value="not-urgent",A.innerText="Not Urgent",u.appendChild(A);const f=document.createElement("label");f.for="task-notes",f.innerText="Notes",a.appendChild(f);const h=document.createElement("textarea");h.name="task-notes",h.id="task-notes",h.cols="30",h.rows="10",h.maxLength="30",a.appendChild(h);const g=document.createElement("div");g.classList.add("form-btns"),a.appendChild(g);const C=document.createElement("button");C.id="create-task-btn",C.classList.add("form-btn"),C.type="submit",C.innerText="Create",g.appendChild(C);const y=document.createElement("button");return y.id="cancel-task-btn",y.classList.add("form-btn"),y.type="submit",y.innerText="Cancel",g.appendChild(y),e})(),o=(e=>{const t=document.createElement("div");t.classList.add("folders-dir"),t.id="folders-dir";const n=document.createElement("div");n.classList.add("folders"),n.appendChild(t);for(let n=0;n<e.tasks.length;n++){const a=Je(e.tasks[n]);a.dataset.index=n,t.appendChild(a)}return t})(t);e.appendChild(n),e.appendChild(a),e.appendChild(r),e.appendChild(i),e.appendChild(o)})(e,a),U.detectMenuClick(),U.detectBackHomeBtn(),U.detectAddTask()},displayTaskPage:a=>{t(),n(),((e,t)=>{const n=g(),a=document.createElement("div");a.id="opaque";const r=C(t.name,!1),i=D(t);e.appendChild(n),e.appendChild(a),e.appendChild(r),e.appendChild(i)})(e,a),U.detectMenuClick(),U.detectBackFolderBtn()}}})();let $e;Ve.displayHeader(),$e=F.getFolders(),Ve.displayMainPage($e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,